// xs_begin
// author : 'CodingEric'
// arg : { var = 'seed'	name = 'Seed'	value = '2048' range = '1 2147483648' step = '1' precision = '0' }
// arg : { var = 'altitude'	name = 'Altitude'	value = '128' range = '0 256' step = '1' precision = '0' }
// arg : { var = 'map_scale_x'	name = 'Map Scale X'	value = '192' range = '0 2048' step = '1' precision = '0' }
// arg : { var = 'map_scale_y'	name = 'Map Scale Y'	value = '192' range = '0 2048' step = '1' precision = '0' }
// arg : { var = 'v_color'	name = 'Color'	value = '1' range = '0 255'	step = '1' precision = '0' }
// arg : { var = 'air_color'	name = 'Air Color'	value = '0' range = '-1 255'	step = '1' precision = '0' }
// arg : { var = 'x_shifting'	name = 'X-Offset'	value = '0' range = '-2147483648 2147483648'	step = '1' precision = '0' }
// arg : { var = 'y_shifting'	name = 'Y-Offset'	value = '0' range = '-2147483648 2147483648'	step = '1' precision = '0' }
// arg : { var = 'z_shifting'	name = 'Z-Offset'	value = '0' range = '-2147483648 2147483648'	step = '1' precision = '0' }
// arg : { var = 'strength_1'	name = 'Layer 1'	value = '1' range = '-10 10'	step = '0.001' precision = '3' }
// arg : { var = 'strength_2'	name = 'Layer 2'	value = '0.25' range = '-10 10'	step = '0.001' precision = '3' }
// arg : { var = 'strength_3'	name = 'Layer 3'	value = '0.0625' range = '-10 10'	step = '0.001' precision = '3' }
// arg : { var = 'time' name = 'Time' value = '0' range = '-256 256' step = '0.01' precision = '2' }
// arg : { var = 'mode'	name = 'Mode'	value = '0' range = '0 3' step = '1' precision = '0' }
// xs_end

// Terrain Generator with Time Parameter

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy;
  vec3 x3 = x0 - D.yyy; 
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
  p=permute(p+vec4(seed));
  float n_ = 0.142857142857;
  vec3  ns = n_ * D.wyz - D.xzx;
  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );
  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);
  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));
  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

float func_mapping_a(float from){
  return 0.5*atan(from)+0.5;
}

float func_mapping_b(float from){
  return 0.5*(sin(from*0.5*3.141))+0.5;
}

float func_mapping_c(float from){
  return pow(0.4,abs(from));
}

float func_mapping_d(float from){
  from=abs(from);
  if(from<0.2&&from>0.)return 1.0;
  else return -2.0*from+1.4;
}

float map(vec3 v){
  seed=seed-floor(seed/16777216.)*16777216.;
  float height=snoise(vec3((v.x+x_shifting)/map_scale_x,(v.y+y_shifting)/map_scale_y,time))*strength_1
  +snoise(vec3((v.x+x_shifting)/(0.25*map_scale_x),(v.y+y_shifting)/(0.25*map_scale_y),time))*strength_2
  +snoise(vec3((v.x+x_shifting)/(0.0625*map_scale_x),(v.y+y_shifting)/(0.0625*map_scale_y),time))*strength_3;
  if(mode==0.) height=func_mapping_a(height)*altitude;
  else if(mode==1.) height=func_mapping_b(height)*altitude;
  else if(mode==2.) height=func_mapping_c(height)*altitude;
  else height=func_mapping_d(height)*altitude;
  if(v.z<=height+z_shifting){
    return v_color;
  }
  if(air_color==-1.)return voxel(v);
  return air_color;
}